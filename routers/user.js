const express=require('express')
const router=new express.Router()
const { User, Token,DriverData,Comment,PushToken, Report } = require('../models/index')
const auth=require('../middleware/auth')
const upload=require('../middleware/upload')
const verify=require('../middleware/verifySignup')
const sendChangePasswordEmail=require('../playground/sendEmail')
const fs = require("fs");
const crypto=require('crypto')
const sendEmailVerificationEmail = require('../playground/sendEmailVerificationEmail')
const sendVerficationCode=require('../playground/sendVerificationCode')
const sequelize=require('sequelize')
const sendForgotPasswordEmail=require('../playground/sengingEmail')





router.post('/users/signup',async (req,res)=>{
    const user=new User(req.body)
    try {
       
        await user.save()
        if(req.body.role=='driver'){
            await User.update({pending:true,role:'user'},{where:{id:user.id}})
        }
        const token = await user.generateAuthToken()
        await user.generateRole(user.role)
        await PushToken.create({token: req.body.pushToken,userId:user.id})


        res.status(201).send({user,token})
    } catch (e) {
        res.status(400).send(e)
    }
      
})


router.post('/users/login', async (req, res) => {
    try {
        const user = await User.findByCredentials(req.body.username, req.body.password)
        const token = await user.generateAuthToken()
        const pushToken=await PushToken.create({token: req.body.pushToken,userId:user.id})
        res.send({ user, token })
    } catch (e) {
        res.status(400).send(e)
    }
    
})

router.post('/users/login/forgotMyPassword', async (req, res) => {
   try {
        const user= await User.findOne({where:{username:req.body.username}})
        if(!user){
            throw new Error('Username does not exist')
        }
        const email=user.email
        const token= await user.generateAuthToken()   
        
        const link = `http://localhost:3001/password-reset/${user.id}/${token}`;
        await sendForgotPasswordEmail(email,link)
        //await sendChangePasswordEmail(email,link)
        res.send({ user,link})
 
    } catch (e) {
        res.status(400).send(e)
    }
    
})


router.post('/users/login/sendVerificationCode', async (req, res) => {
    try {
        //  const user= await User.findOne({where:{username:req.body.username}})
        //  if(!user){
        //      throw new Error('Username does not exist')
        //  }
        //  const email=user.email
        //  const token= await user.generateAuthToken()   
        //  console.log(token)
         
        //  const link = `${req.body.url}/password-reset/${user.id}/${token}`;
        //  await sendForgotPasswordEmail()
        //  //await sendChangePasswordEmail(email,link)
        //  res.send({ user,link})
        await sendVerficationCode()
        res.send()
  
     } catch (e) {
         console.log(e)
         res.status(400).send(e)
     }
     
 })


router.post('/me/logout', auth, async (req, res) => {
    try {
        await Token.destroy({where: {token:req.user.token}})
        await PushToken.destroy({where:{token:req.body.pushToken}})
        res.send("logged out")
    } catch (e) {
        res.status(500).send()
    }
})

router.post('/me/logoutAll', auth, async (req, res) => {
    try {
        await Token.destroy({ where: { userId: req.user.id } })
        res.send()
    } catch (e) {
        res.status(500).send()
    }
})

router.post('/users/uploadDrivingLicense',  upload.single('file'),auth,  async (req, res) => {

    const user=req.user
    const userId=user.id
    const filePath = `${req.file.destination}/${req.file.filename}`
    console.log("file path: "+filePath)
    //below code will read the data from the upload folder. Multer     will automatically upload the file in that folder with an  autogenerated name
    try{
        fs.readFile(req.file.path,(err, contents)=> {
            if (err) {
                throw new Error('error: '+ err)
            }
        })
     
        const driver= await DriverData.findOne({where:{userId:userId}})
        if(!driver){
            const driverData = new DriverData({ drivingLicense: filePath,userId:userId  })
            await driverData.save()
            res.send('saved')
            return
        }
        await DriverData.update({ drivingLicense: filePath},{where:{userId:userId}})
        res.send('saved')
    }catch (e) {
    res.status(500).send(e)
    }
    }
  );

router.post('/users/uploadCarLicense',  upload.single('file'),auth,  async (req, res) => {
    const user=req.user
    const userId=user.id
    const filePath = `${req.file.destination}/${req.file.filename}`
    //below code will read the data from the upload folder. Multer     will automatically upload the file in that folder with an  autogenerated name
    try{
        fs.readFile(req.file.path,(err, contents)=> {
            if (err) {
            throw new Error('error: '+ err)
            }
        })
     
        const driver=await DriverData.findOne({where:{userId:userId}})
        if(!driver){
        const driverData = new DriverData({ carLicense: filePath,userId:userId  })
        await driverData.save()
        res.send('saved')
        return
        }
       await  DriverData.update({ carLicense: filePath},{where:{userId:userId}})
        res.send('saved')
    }catch (e) {
    res.status(500).send(e)
    }
    }
   );

  


router.post('/users/uploadCarInsurance',upload.single('file'), auth,async(req, res,next) => {
    const user=req.user
    const userId=user.id
    const filePath = `${req.file.destination}/${req.file.filename}`
    //below code will read the data from the upload folder. Multer     will automatically upload the file in that folder with an  autogenerated name
    try{
        fs.readFile(req.file.path,(err, contents)=> {
            console.log("file path: "+req.file.path)
        if (err) {
            throw new Error('error: '+ err)
        }
        })
     
        const driver=await DriverData.findOne({where:{userId:userId}})
        if(!driver){
        const driverData = new DriverData({ carInsurance: filePath,userId:userId  })
        await driverData.save()
        res.send('saved')
        return
        }
       await  DriverData.update({ carInsurance: filePath},{where:{userId:userId}})
        res.send('saved')
        }catch (e) {
            res.status(500).send(e)
        }
    }
   )



router.get('/users/profile/:id', auth, async (req, res) => {
    const id=req.params.id
    try {
    let comments=await Comment.findAll({where:{CommentToId:id},order: sequelize.literal('rand()'),limit:5,attributes:['comment','userId']})
    let userr
    for (var i = 0; i < comments.length; i++){
       userr= await User.findOne({where:{id:comments[i].userId}})
       comments[i].setDataValue('username',userr.username)
    }
    if(id!=req.user.id){
        const user=await User.findOne({where:{id}})
        user['profilePicture']=fs.readFileSync(user['profilePicture'])
        user.setDataValue('comments',comments)
        res.send(user)
        return
    }
    const user=await User.findOne({where:{id:req.user.id}})
    
    //console.log(fs.readFileSync('D:/Documents/Desktop/Graduation Project/files/uploads/profilePicture.webp'))
    user['profilePicture']=fs.readFileSync(user['profilePicture'])
    user.setDataValue('comments',comments)

    res.send(user)
    } catch (e) {
        console.log(e)
    res.status(400).send()
  }
})

router.patch('/me/changeBio', auth, async (req, res) => {
    const id=req.user.id
    try {
        User.update({ bio: req.body.bio},{where:{id:id}})
        res.status(200).send("updated succesfully")
    } catch (e) {
    res.status(400).send()
  }
})

router.patch('/me/changeProfilePicture',upload.single('file'), auth, async (req, res) => {
    const id=req.user.id
    try {
        const filePath = `${req.file.destination}/${req.file.filename}`
        fs.readFile(req.file.path,(err, contents)=> {
            console.log("file path: "+req.file.path)
        if (err) {
            throw new Error('error: '+ err)
        }
        //console.log(contents)
        })
     

        await User.update({ profilePicture: filePath},{where:{id}})
        res.status(200).send("updated succesfully")
    } catch (e) {
    res.status(400).send()
  }
})

router.patch('/me/changePassword', auth, async (req, res) => {
    const id=req.user.id   
    try {
    const user=await User.findOne({where:{id}})
    const oldPassword= user.password
    if(oldPassword==req.body.oldPassword){
        await User.update({ password: req.body.newPassword},{where:{id}})
        res.status(200).send("updated succesfully")
        return
    }
    res.status(403).send()
  
    } catch (e) {
    res.status(400).send()
  }
})

router.patch('/me/becomeDriver', auth, async (req, res) => {
    const id=req.user.id
    try {
        await User.update({pending:true},{where:{id}})
        //await User.update({ role: "driver"},{where:{id}})
        res.status(200).send("updated succesfully")
    } catch (e) {
    res.status(400).send()
  }
})

router.post('/me/sendVerificationEmail', auth, async (req, res) => {
    const id=req.user.id
    try {
        const user=User.findOne({where:{id}})
        const emailToken=crypto.randomBytes(64).toString('hex')
        await User.update({ emailToken},{where:{id}})


        const url = `${req.body.url}/user/verify/${emailToken}`;
        await sendEmailVerificationEmail(user.email, "Verify Email", url);
        res.send("An Email sent to your account please verify")


    } catch (e) {
    res.status(400).send()
  }
})

router.get('/me/verifyEmail/:token', auth, async (req, res) => {
   
    try {
        const user=User.findOne({where:{emailToken:req.params.token}})
        if(!user){
            res.send("invalid link")
            return
        }
        
        user.emailToken=null
        user.verifiedEmail=true
        user.save()


    } catch (e) {
    res.status(400).send()
  }
})

router.post('/users/rate/:id', auth, async (req, res) => {
   const id=req.params.id
   const newRate=parseFloat(req.body.rate)
    try {

        const user=await User.findOne({where:{id}})
    if(!user){
        return "No such User"
    }

    const previousRating=user.rating
    let newRating=parseFloat((previousRating*user.numberOfRates)+newRate)/(user.numberOfRates+1)
    await User.update({ rating:newRating,numberOfRates:user.numberOfRates+1},{where:{id}})
    //user.numberOfRates++
        //User.Rate(id,newRate)
        res.send()

    } catch (e) {
    console.log(e)
    res.status(400).send()
  }
})

// router.get('/users/comments/:id', auth, async (req, res) => {
//     const id=req.params.id
//      try {
//         const comments=Comment.findAll({where:{CommentToId:id},limit:5})
//         res.send(comments)
//      } catch (e) {
//      console.log(e)
//      res.status(400).send()
//    }
//  })

router.post('/users/comment/:id', auth, async (req, res) => {
    const commenterId=req.user.id
    const commentedToId=req.params.id
     try {
        await Comment.create({
            comment: req.body.comment,
            userId:commenterId,
            commentToId:commentedToId
          })
          res.send("added successfully")
 
     } catch (e) {
     res.status(400).send()
   }
 })

 router.post('/users/report/:id', auth, async (req, res) => {
    const reportFromId=req.user.id
    const reportToId=req.params.id
     try {
        await Report.create({
            reportMessage: req.body.reportMessage,
            userId:reportFromId,
            reportToId
          })
          res.send("reported successfully")
 
     } catch (e) {
     res.status(400).send()
   }
 })


 router.post('/user/rating/:id', auth, async (req, res) => {
    const id=req.params.id
    const newRate=parseFloat(req.body.rate)
     try {
 
         const user=await User.findOne({where:{id}})
     if(!user){
         return "No such User"
     }
 
     const previousRating=user.rating
     let newRating=parseFloat((previousRating*user.numberOfRates)+newRate)/(user.numberOfRates+1)
     await User.update({ rating:newRating,numberOfRates:user.numberOfRates+1},{where:{id}})
     //user.numberOfRates++
         //User.Rate(id,newRate)
         if(req.body.comment){
            const commenterId=req.user.id
            const commentedToId=req.params.id
     
        await Comment.create({
            comment: req.body.comment,
            userId:commenterId,
            commentToId:commentedToId
          })
         }
         res.send()
 
     } catch (e) {
     console.log(e)
     res.status(400).send()
   }
 
  })

router.delete('/users/deleteAccount', auth, async (req, res) => {
    try {
      await User.destroy({ where: { id: req.user.id } })
      res.send()
    } catch (e) {
      res.status(500).send()
    }
  })


module.exports=router